<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Prestataire;
use Doctrine\ORM\EntityRepository;

/**
 * PrestataireRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PrestataireRepository extends EntityRepository
{
    public function findPrestataires($slug)
    {
        if($slug != null){
            $data = $this->findOneBy(array('slug'=> $slug));
            $gc = $this->getCote($data);
            $cote = $gc[0]['cote'];
            $data->cote = $cote;
        }else {
            $data = $this->findAll();
            foreach ($data as $prest)
            {
                $gc = $this->getCote($prest);
                $cote = $gc[0]['cote'];
                $prest->cote = $cote;
            }
        }
        return $data;
    }

    public function getCote(Prestataire $prestataire)
    {
        $query = $this->getEntityManager()->createQuery("SELECT (AVG(c.cote)/5) cote FROM AppBundle:Commentaire c WHERE c.cibleCommentaire = ?1");
        $query->setParameter(1,$prestataire);
        $result = $query->getResult();

        return $result;
    }

    //test

    public function findAllWithEverithing()
    {
        $qb = $this->createQueryBuilder('p');
        $qb->leftJoin('p.stages','stages')->addSelect('stages');
        $qb->leftJoin('p.promotions','promotions')->addSelect('promotions');
        $qb->leftJoin('p.photos','photos')->addSelect('photos');
        $qb->leftJoin('p.logo','logo')->addSelect('logo');
        $qb->leftJoin('p.categories','categories')->addSelect('categories');
        $qb->set('cote',4);


        $query= $qb->getQuery();

        $result=$query->getResult();
        return $result;
    }

    //exemple en class

    public function findAllWithStages()
    {
        $qb = $this->createQueryBuilder('p');
        $qb->join('p.stages','stages');
        $query= $qb->getQuery();
        $result=$query->getResults();
        return $result;
    }

    protected function addJoins($qb)
    {
        $qb->join('p.promos','promos');
        $qb->join('p.stages','stages');
        $qb->join('p.categories','cat');
    }

    public function finAllWithJoins()
    {
        $qb = $this->createQueryBuilder('p');
        $this->addJoins($qb);
        $query=$qb->getQuery();
        $results=$query->getResult();
        return $results;
    }

    public function findOneWithJoins($id,$date)
    {
        $qb = $this->createQueryBuilder('p');
        $this->addJoins($qb);
        $qb->where('p.id =:id');
        $qb->setParameter('id',$id);

        $qb->andWhere('p.date>:date');

        $qb->innerJoin('p.stages','stages','WITH','stages.date >:date');
        $qb->setParameter('date',$date);

        $query=$qb->getQuery();
        $results=$query->getResult();
        return $results;
    }


}
